import cv2
import numpy as np
import tensorflow as tf
from object_detection.utils import label_map_util
from object_detection.utils import visualization_utils as vis_util

# Set up the cameras
camera1 = cv2.VideoCapture(0)
camera2 = cv2.VideoCapture(1)

# Set up the TensorFlow model
MODEL_NAME = 'path/to/tensorflow/model'
PATH_TO_LABELS = 'path/to/label_map.pbtxt'
NUM_CLASSES = 2

# Load the label map
label_map = label_map_util.load_labelmap(PATH_TO_LABELS)
categories = label_map_util.convert_label_map_to_categories(label_map, max_num_classes=NUM_CLASSES, use_display_name=True)
category_index = label_map_util.create_category_index(categories)

# Load the TensorFlow model into memory
detection_graph = tf.Graph()
with detection_graph.as_default():
    od_graph_def = tf.GraphDef()
    with tf.gfile.GFile(MODEL_NAME, 'rb') as fid:
        serialized_graph = fid.read()
        od_graph_def.ParseFromString(serialized_graph)
        tf.import_graph_def(od_graph_def, name='')

    # Define input and output tensors
    image_tensor = detection_graph.get_tensor_by_name('image_tensor:0')
    detection_boxes = detection_graph.get_tensor_by_name('detection_boxes:0')
    detection_scores = detection_graph.get_tensor_by_name('detection_scores:0')
    detection_classes = detection_graph.get_tensor_by_name('detection_classes:0')
    num_detections = detection_graph.get_tensor_by_name('num_detections:0')

# Start capturing images from the cameras
while True:
    # Read images from the cameras
    ret1, image1 = camera1.read()
    ret2, image2 = camera2.read()

    # Combine the images horizontally for visualization purposes
    combined_image = cv2.hconcat([image1, image2])

    # Run object detection on the combined image using TensorFlow
    with detection_graph.as_default():
        with tf.Session(graph=detection_graph) as sess:
            # Expand dimensions since the model expects images to have shape: [1, None, None, 3]
            image_np_expanded = np.expand_dims(combined_image, axis=0)

            # Run inference
            (boxes, scores, classes, num) = sess.run(
                [detection_boxes, detection_scores, detection_classes, num_detections],
                feed_dict={image_tensor: image_np_expanded})

            # Visualize the results on the image
            vis_util.visualize_boxes_and_labels_on_image_array(
                combined_image,
                np.squeeze(boxes),
                np.squeeze(classes).astype(np.int32),
                np.squeeze(scores),
                category_index,
                use_normalized_coordinates=True,
                line_thickness=8)

    # Display the image with the detected objects
    cv2.imshow('Object Detection', combined_image)

    # Exit the loop if 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the cameras and close the window
camera1.release()
camera2.release()
cv2.destroyAllWindows()
